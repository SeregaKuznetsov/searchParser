разработчик  приложен  для  android  ориентир  при  разработк  на  все  вышедш  устройств  наверняк  знаком  с  эт  схем  на  1  июл  2010  год  эт  был  статистик  запущен  верс  android  с  выход  нов  верс  android  разработчик  стал  задумыва  добав  в  приложен  нов  функц  предоставлен  нов  верс  либ  сдела  ег  доступн  на  как  можн  больш  количеств  устройств  опытн  разработчик  уж  удостовер  что  эт  два  вариант  явля  взаимоисключа  и  сохранен  баланс  межд  ним  может  быт  болезнен  в  эт  стат  я  покаж  вам  что  эт  не  так  нескольк  недел  назад  в  наш  стат  мы  рассмотрел  как  обраща  с  мультитач  на  android  20  eclair  и  выш  получ  в  конц  прост  демонстрацион  приложен  в  эт  стат  мы  передела  наш  приложен  так  чтоб  он  правильн  работа  на  всех  верс  вплот  до  android  15  вы  может  взят  исходник  стар  приложен  на  google  code  проблем  в  манифест  тэг  uses-sdk  в  androidmanifestxml  может  быт  уточн  двум  параметр  minsdkversion  и  targetsdkversion  эт  вы  может  сказа  что  приложен  готов  к  работ  на  стар  верс  но  в  то  же  врем  может  работа  и  на  нов  тепер  вы  может  использова  нов  sdk  для  разработк  но  есл  вы  будет  использова  непосредствен  функциональн  нов  платформ    вот  что  вы  может  увидет  в  системн  журнал  e/dalvikvm   792  could  not  find  method  androidviewmotioneventgetx  referenced  from  method  comexampleandroidtouchexampletouchexampleviewontouchevent  w/dalvikvm   792  vfy  unable  to  resolve  virtual  method  17  landroid/view/motioneventgetx  if  w/dalvikvm   792  vfy   rejecting  opcode  0x6e  at  0x0006  w/dalvikvm   792  vfy   rejected  lcom/example/android/touchexample/touchexampleviewontouchevent  landroid/view/motioneventz  w/dalvikvm   792  verifier  rejected  class  lcom/example/android/touchexample/touchexampleview  d/androidruntime   792  shutting  down  vm  w/dalvikvm   792  threadid3  thread  exiting  with  uncaught  exception  group0x4000fe70  мы  неправильн  указа  minsdkversion  и  вот  он  результат  мы  разрабатыва  наш  приложен  на  sdk  8  froyo  но  остав  параметр  minsdkversion”3”  cupcake  мы  как  бы  сказа  приложен  что  осозна  сво  намерен  и  не  буд  прос  невозможн  есл  мы  остав  все  так  как  ест    наш  пользовател  со  стар  верс  sdk  увид  некрасив  сообщен  об  ошибк  конечн  же  толп  обижен  пользовател  будут  оценива  ваш  приложен  в  маркет  на  1  звезд  чтоб  избежа  эт  мы  должн  сдела  безопасн  доступ  к  функц  нов  платформ  без  сердит  проверок  на  бол  стар  верс  систем  метод  отражен  мног  разработчик  уж  знаком  с  практик  решен  эт  проблем  с  помощ  отражен  reflection  отражен  позволя  код  взаимодействова  со  сред  выполнен  и  определя  когд  целев  метод  ил  класс  существ  и  вызыва  их  либ  создава  экземпляр  не  кас  их  непосредствен  перспектив  запрос  функц  друг  платформ  целенаправлен  либ  условн  ссыл  на  отражен    эт  не  хорош  эт  уродлив  эт  медлен  эт  громоздк  прежд  всег  ег  интенсивн  использован  в  код  преврат  ег  в  неудобн  для  дальн  поддержк  мусор  что  есл  я  скаж  что  ест  способ  писа  приложен  ориентирова  на  android  15  cupcake  использу  22  froyo  с  помощ  одн  код  и  не  использу  отражен  отложен  загрузк  исследовател  bill  pugh  опубликова  и  распростран  метод  написан  синглтон  в  java  со  всем  преимуществ  использован  отложен  загрузк  classloader'ов  материа  из  википед  объясня  этот  метод  код  выгляд  так  public class singleton {<br/>    // private constructor prevents instantiation from other classes<br/>    private singleton {}<br/>    /**<br/>     * singletonholder загружается при первой проверке singletongetinstance <br/>     *или при первом доступе к singletonholderinstance не ранее<br/>     */<br/>    private static class singletonholder { <br/>      private static final singleton instance  new singleton<br/>    }<br/>    public static singleton getinstance {<br/>      return singletonholderinstance<br/>    }<br/>  }  очен  важн  част  ег  работ  описа  в  комментар  java  класс  загружа  и  инициализир  при  перв  доступ    созда  на  перв  врем  экземпляр  класс  либ  получа  доступ  к  метод  ил  одн  из  ег  статическ  пол  эт  важн  для  нас  пот  что  класс  проверя  виртуальн  машин  тольк  когд  он  загруж  не  раньш  тепер  у  нас  ест  все  для  тог  чтоб  писа  приложен  для  android  не  использу  метод  отражен  проектирован  совместим  как  оказа  на  практик  эт  довольн  прост  как  прав  вы  хот  чтоб  ваш  приложен  корректн  деградирова  на  стар  верс  платформ  убир  некотор  функц  либ  разрабатыв  альтернативн  поскольк  функциональн  android  связа  тольк  с  верс  api  у  вас  ест  тольк  одн  вещ  за  котор  вы  должн  след  при  проектировк  совместим  в  большинств  случа  этот  вариант  поддержк  может  быт  реализова  как  прост  иерарх  класс  вы  может  спроектирова  ваш  приложен  для  доступ  к  функц  чувствительн  к  верс  использу  независя  от  верс  интерфейс  либ  абстрактн  класс  подкласс  в  интерфейс  предназначен  для  запуск  на  нов  верс  платформ  может  поддержива  нов  возможн  систем  а  подкласс  предназначен  для  запуск  на  бол  стар  верс  платформ  должн  предоставля  функциональн  приложен  альтернативн  пут  воплощен  принцип  на  практик  в  начал  эт  стат  я  сказа  что  мы  буд  переделыва  сдела  ран  приложен  для  работ  с  мультитач  с  верс  api  3  cupcake  под  верс  8  froyo  в  опубликова  ран  стат  я  отмет  что  gesturedetectors  явля  полезн  образц  для  абстрагирован  обработк  событ  сенсор  тогд  я  не  понима  как  быстр  эт  реализ  и  протестир  мы  мож  передела  завися  от  верс  элемент  демо-приложен  и  реализова  все  эт  с  помощ  абстрактн  gesturedetector  перед  тем  как  нача  работ  мы  должн  измен  наш  манифест  чтоб  заяв  о  поддержк  api  верс  3  с  помощ  minsdkversion  в  тэг  uses-sdk  им  в  вид  что  мы  до  сих  пор  ориентиру  на  верс  8  эт  такж  нужн  отмет  в  параметр  targetsdkversion  ваш  манифест  тепер  наш  манифест  будет  выглядет  так  <xml version"10" encoding"utf-8"><br/>  <manifest xmlnsandroid"schemasandroidcom/apk/res/android"<br/>        package"comexampleandroidtouchexample"<br/>        androidversioncode"1"<br/>        androidversionname"10"><br/>      <application androidicon"@drawable/icon" androidlabel"@string/app_name"><br/>          <activity androidname"touchexampleactivity"<br/>                    androidlabel"@string/app_name"><br/>              <intent-filter><br/>                  <action androidname"androidintentactionmain" /><br/>                  <category androidname"androidintentcategorylauncher" /><br/>              </intent-filter><br/>          </activity><br/>      </application><br/>      <uses-sdk androidminsdkversion"3" androidtargetsdkversion"8" /><br/>  </manifest>  наш  класс  touchexampleview  не  совмест  с  верс  android  вплот  до  froyo  из-з  использован  scalegesturedetector  и  не  совмест  с  верс  ниж  eclair  из-з  использован  нов  метод  motionevent  котор  считыва  дан  с  мультитач  мы  должн  абстрагирова  эт  функциональн  в  класс  котор  не  будут  загружа  на  верс  не  поддержива  дан  функциональн  для  эт  мы  создад  нов  класс  назов  ег  versionedgesturedetector  в  приложении-пример  пользовател  доступн  2  жест  перетаскиван  drag  и  масштаб  scale  следовательн  versionedgesturedetector  долж  определя  два  событ  ondrag  и  onscale  touchexampleview  долж  получа  экземпляр  класс  versionedgesturedetector  соответств  верс  платформ  фильтрова  поступа  событ  через  нег  и  соответствен  реагирова  на  ondrag  и  onscale  перв  вариант  versionedgesturedetector  будет  так  public abstract class versionedgesturedetector {<br/>      ongesturelistener mlistener<br/>   <br/>      public abstract boolean ontoucheventmotionevent ev<br/>   <br/>      public interface ongesturelistener {<br/>          public void ondragfloat dx float dy<br/>          public void onscalefloat scalefactor<br/>      }<br/>  }  снача  приложен  старт  с  прост  функциональн  ориентирова  на  cupcake  для  простот  в  эт  пример  мы  буд  воплоща  поддержк  кажд  верс  с  помощ  статическ  внутрен  класс  в  versionedgesturedetector  конечн  вы  может  реализова  эт  так  как  вам  захочет  при  эт  использу  показа  выш  техник  отложен  загрузк  либ  эквивалентн  е  не  трога  класс  котор  напрям  использ  функциональн  не  поддержива  дан  верс  платформ  private static class cupcakedetector extends versionedgesturedetector {<br/>      float mlasttouchx<br/>      float mlasttouchy<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          switch evgetaction {<br/>          case motioneventaction_down {<br/>              mlasttouchx  evgetx<br/>              mlasttouchy  evgety<br/>              break<br/>          }<br/>          case motioneventaction_move {<br/>              final float x  evgetx<br/>              final float y  evgety<br/>              mlistenerondragx - mlasttouchx y - mlasttouchy<br/>   <br/>              mlasttouchx  x<br/>              mlasttouchy  y<br/>              break<br/>          }<br/>          }<br/>          return true<br/>      }<br/>  }  эт  прост  реализац  организац  событ  ondrag  при  перемещен  указател  по  экран  значен  котор  он  принима  равн  пройден  указател  пут  по  x  и  по  y  начин  с  верс  eclair  мы  должн  четк  отслежива  идентификатор  указател  чтоб  не  допуст  появлен  дополнительн  указател  уходя  за  предел  экра  базов  реализац  ontouchevent  в  cupcakedetector  может  отслежива  перемещен  указател  но  с  двум  хитрост  мы  должн  добав  метод  getactivex  и  getactivey  для  получен  соответств  координат  и  переопределен  их  в  eclairdetector  для  получен  корректн  координат  указател   <br/>  private static class cupcakedetector extends versionedgesturedetector {<br/>      float mlasttouchx<br/>      float mlasttouchy<br/>   <br/>      float getactivexmotionevent ev {<br/>          return evgetx<br/>      }<br/>      float getactiveymotionevent ev {<br/>          return evgety<br/>      }<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          switch evgetaction {<br/>          case motioneventaction_down {<br/>              mlasttouchx  getactivexev<br/>              mlasttouchy  getactiveyev<br/>              break<br/>          }<br/>          case motioneventaction_move {<br/>              final float x  getactivexev<br/>              final float y  getactiveyev<br/>              mlistenerondragx - mlasttouchx y - mlasttouchy<br/>   <br/>              mlasttouchx  x<br/>              mlasttouchy  y<br/>              break<br/>          }<br/>          }<br/>          return true<br/>      }<br/>  }  тепер  eclairdetector  переопределен  нов  метод  getactivex  и  getactivey  больш  част  эт  код  должн  быт  вам  знаком  из  оригинальн  пример  описа  в  начал  стат   <br/>  private static class eclairdetector extends cupcakedetector {<br/>      private static final int invalid_pointer_id  -1<br/>      private int mactivepointerid  invalid_pointer_id<br/>      private int mactivepointerindex  0<br/>      @override<br/>      float getactivexmotionevent ev {<br/>          return evgetxmactivepointerindex<br/>      }<br/>      @override<br/>      float getactiveymotionevent ev {<br/>          return evgetymactivepointerindex<br/>      }<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          final int action  evgetaction<br/>          switch action & motioneventaction_mask {<br/>          case motioneventaction_down<br/>              mactivepointerid  evgetpointerid0<br/>              break<br/>          case motioneventaction_cancel<br/>          case motioneventaction_up<br/>              mactivepointerid  invalid_pointer_id<br/>              break<br/>          case motioneventaction_pointer_up<br/>              final int pointerindex  evgetaction & motioneventaction_pointer_index_mask <br/>                  >> motioneventaction_pointer_index_shift<br/>              final int pointerid  evgetpointeridpointerindex<br/>              if pointerid  mactivepointerid {<br/>                  // this was our active pointer going up choose a new<br/>                  // active pointer and adjust accordingly<br/>                  final int newpointerindex  pointerindex  0  1  0<br/>                  mactivepointerid  evgetpointeridnewpointerindex<br/>                  mlasttouchx  evgetxnewpointerindex<br/>                  mlasttouchy  evgetynewpointerindex<br/>              }<br/>              break<br/>          }<br/>          mactivepointerindex  evfindpointerindexmactivepointerid<br/>          return superontoucheventev<br/>      }<br/>  }  eclairdetector  вызыва  superontouchevent  посл  определен  идентификатор  указател  запуска  cupcakedetector  для  определен  событ  перемещен  drag  мультиплатформен  не  должн  стат  причин  для  дублирован  код  наконец  дава  добав  scalegesturedetector  котор  будет  реализовыва  поддержк  жест  масштабирован  для  froyo  для  тог  чтоб  избежа  перемещен  во  врем  масштабирован  мы  должн  добав  нескольк  изменен  в  cupcakedetector  у  некотор  тачскрин  ест  проблем  с  масштабирован  поэт  мы  должн  учест  эт  мы  добав  метод  shoulddrag  в  cupcakedetector  котор  будет  осуществля  проверк  перед  отправк  событ  ondrag  финальн  верс  cupcakedetector  private static class cupcakedetector extends versionedgesturedetector {<br/>      float mlasttouchx<br/>      float mlasttouchy<br/>   <br/>      float getactivexmotionevent ev {<br/>          return evgetx<br/>      }<br/>      float getactiveymotionevent ev {<br/>          return evgety<br/>      }<br/>   <br/>      boolean shoulddrag {<br/>          return true<br/>      }<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          switch evgetaction {<br/>          case motioneventaction_down {<br/>              mlasttouchx  getactivexev<br/>              mlasttouchy  getactiveyev<br/>              break<br/>          }<br/>          case motioneventaction_move {<br/>              final float x  getactivexev<br/>              final float y  getactiveyev<br/>   <br/>              if shoulddrag {<br/>                  mlistenerondragx - mlasttouchx y - mlasttouchy<br/>              }<br/>   <br/>              mlasttouchx  x<br/>              mlasttouchy  y<br/>              break<br/>          }<br/>          }<br/>          return true<br/>      }<br/>  }  eclairdetector  оста  неизмен  froyodetector  ниж  shoulddrag  долж  возвраща  положительн  значен  пок  неактивн  масштабирован  private static class froyodetector extends eclairdetector {<br/>      private scalegesturedetector mdetector<br/>      public froyodetectorcontext context {<br/>          mdetector  new scalegesturedetectorcontext<br/>                  new scalegesturedetectorsimpleonscalegesturelistener {<br/>                      @override public boolean onscalescalegesturedetector detector {<br/>                          mlisteneronscaledetectorgetscalefactor<br/>                          return true<br/>                      }<br/>                  }<br/>      }<br/>      @override<br/>      boolean shoulddrag {<br/>          return mdetectorisinprogress<br/>      }<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          mdetectorontoucheventev<br/>          return superontoucheventev<br/>      }<br/>  }  тепер  у  нас  ест  реализац  детектор  жест  тепер  мы  должн  найт  способ  созда  ег  дава  создад  метод  versionedgesturedetector  public static versionedgesturedetector newinstancecontext context<br/>          ongesturelistener listener {<br/>      final int sdkversion  integerparseintbuildversionsdk<br/>      versionedgesturedetector detector  null<br/>      if sdkversion < buildversion_codeseclair {<br/>          detector  new cupcakedetector<br/>      } else if sdkversion < buildversion_codesfroyo {<br/>          detector  new eclairdetector<br/>      } else {<br/>          detector  new froyodetectorcontext<br/>      }<br/>      detectormlistener  listener<br/>      return detector<br/>  }  поскольк  мы  ориентиру  на  cupcake  мы  ещ  не  име  доступ  к  buildversionsdk_int  вмест  нег  мы  должн  использова  нын  устаревш  buildversionsdk  наш  versionedgesturedetector  гот  тепер  нужн  совмест  ег  с  touchexampleview  котор  стал  значительн  короч  public class touchexampleview extends view {<br/>      private drawable micon<br/>      private float mposx<br/>      private float mposy<br/>      private versionedgesturedetector mdetector<br/>      private float mscalefactor  1f<br/>      public touchexampleviewcontext context {<br/>          thiscontext null 0<br/>      }<br/>      public touchexampleviewcontext context attributeset attrs {<br/>          thiscontext attrs 0<br/>      }<br/>      public touchexampleviewcontext context attributeset attrs int defstyle {<br/>          supercontext attrs defstyle<br/>          micon  contextgetresourcesgetdrawablerdrawableicon<br/>          miconsetbounds0 0 micongetintrinsicwidth micongetintrinsicheight<br/>   <br/>          mdetector  versionedgesturedetectornewinstancecontext new gesturecallback<br/>      }<br/>      @override<br/>      public boolean ontoucheventmotionevent ev {<br/>          mdetectorontoucheventev<br/>          return true<br/>      }<br/>      @override<br/>      public void ondrawcanvas canvas {<br/>          superondrawcanvas<br/>          canvassave<br/>          canvastranslatemposx mposy<br/>          canvasscalemscalefactor mscalefactor<br/>          micondrawcanvas<br/>          canvasrestore<br/>      }<br/>      private class gesturecallback implements versionedgesturedetectorongesturelistener {<br/>          public void ondragfloat dx float dy {<br/>              mposx + dx<br/>              mposy + dy<br/>              invalidate<br/>          }<br/>          public void onscalefloat scalefactor {<br/>              mscalefactor * scalefactor<br/>              // don't let the object get too small or too large<br/>              mscalefactor  mathmax01f mathminmscalefactor 50f<br/>              invalidate<br/>          }<br/>      }<br/>  }  заключен  вот  мы  и  адаптирова  наш  приложен  для  корректн  работ  на  android  15  через  лучш  нов  функц  предоставлен  платформ  и  без  един  использован  отражен  те  же  сам  принцип  можн  примен  к  люб  нов  особен  android  позвол  ваш  приложен  запуска  на  бол  стар  верс  android  classloader  загружа  класс  отложен  провер  их  при  перв  доступ  функциональн  и  интерфейс  завися  от  верс  платформ  завися  от  верс  реализац  базирова  на  верс  платформ  определен  во  врем  выполнен  эт  избавля  classloader  от  использован  класс  котор  не  смогут  быт  выполн  корректн  чтоб  увидет  окончательн  верс    посет  раздел  «cupcake»  на  google  code  дополнительн  информац  в  эт  пример  мы  не  стал  предлага  альтернативн  пут  для  пользовател  использ  ос  вышедш  до  froyo  т к  scalegesturedetector  стал  доступ  тольк  в  22  для  реальн  приложен  мы  хотел  бы  предлож  альтернативн  пут  традицион  телефон  с  android  имеют  хардварн  кнопк  управлен  зум  класс  zoomcontrols  и  zoombuttonscontroller  помогут  вам  в  реализац  дан  пут  реализац  эт  и  будет  упражнен  для  читател  